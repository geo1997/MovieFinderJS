{"version":3,"sources":["components/Nav.js","components/SearchBox.js","hover.js","components/Movie.js","components/MovieLists.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","class","SearchBox","props","handleSubmit","searchChange","searchItem","style","marginTop","placeholder","type","onChange","onKeyPress","$","hover","this","find","click","Movie","url","id","window","location","href","image","src","alt","width","height","title","onClick","viewMovie","bind","rel_date","pop","React","Component","MovieLists","key","movie","poster_path","overview","release_date","popularity","App","state","performSearch","searchTerm","urlString","ajax","success","searchResults","console","log","results","movieRows","forEach","movieRow","push","setState","rows","error","xhr","status","err","e","target","value","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ddbf7a4c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Nav= () =>{\r\nreturn(\r\n    <div className=\"navbar-fixed\">\r\n    <nav className={\"#212121 grey darken-4\"}>\r\n        <div className=\"nav-wrapper\">\r\n            <a  class={\"brand-logo center\"}>Movie Finder </a>\r\n        </div>\r\n    </nav>\r\n    </div>\r\n)\r\n\r\n};\r\n\r\nexport default Nav;","import React from \"react\";\r\n\r\n\r\nconst SearchBox = (props) => {\r\n\r\n    const {handleSubmit,searchChange,searchItem} = props;\r\n\r\n\r\n    return(\r\n        <div className={\"container\"} style={{marginTop:30}}>\r\n            <div className={\"row\"}>\r\n                <section className={\"col s8  offset-s2 \"}>\r\n                    <div className=\"card-panel hoverable\">\r\n\r\n                        <div className={\"input-field\"}>\r\n                            <input placeholder=\"search movie\" type=\"text\" onChange={searchChange} onKeyPress={handleSubmit}  />\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                </section>\r\n\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n\r\n};\r\n\r\nexport default SearchBox;","\r\nimport $ from 'jquery'\r\n\r\n$(function() {\r\n    $('.card').hover(\r\n        function() {\r\n            $(this).find('> .card-image > img.activator').click();\r\n        }, function() {\r\n            $(this).find('> .card-reveal > .card-title').click();\r\n        }\r\n    );\r\n});\r\n","import React from \"react\";\r\nimport '../card.css'\r\nimport '../hover'\r\n\r\n\r\nclass Movie extends React.Component {\r\n\r\n\r\n    viewMovie()\r\n    {\r\n\r\n        const url = \"https://www.themoviedb.org/movie/\" + this.props.id;\r\n\r\n        window.location.href = url;\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n\r\n\r\n            <div className=\"col s12 m6 l3\">\r\n\r\n                <div className=\"card\">\r\n\r\n\r\n                    <div className=\"card-image waves-effect waves-block waves-dark\">\r\n                        {\r\n                            this.props.image == null ?\r\n                                <img className=\"activator\"\r\n                                     src={'https://us.123rf.com/450wm/pavelstasevich/pavelstasevich1811/pavelstasevich181101065/112815953-stock-vector-no-image-available-icon-flat-vector.jpg?ver=6'}\r\n                                     alt=\"card image\"\r\n                                     style={{width: \"100%\", height: 200}}/>\r\n                                :\r\n                                <img className=\"activator\" src={`http://image.tmdb.org/t/p/w185${this.props.image}`}\r\n                                     alt=\"card image\"\r\n                                     style={{width: \"100%\", height: 200}}/>\r\n                        }\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                <span className=\"card-title activator grey-text text-darken-4\">{this.props.title}<i\r\n                    className=\"material-icons right\">more_vert</i></span>\r\n\r\n                        <p><a onClick={this.viewMovie.bind(this)} >More Details</a></p>\r\n                    </div>\r\n                    <div className=\"card-reveal\">\r\n                <span className=\"card-title grey-text text-darken-4\">{this.props.title}<i\r\n                    className=\"material-icons right\">close</i></span>\r\n                        <h4>Release Date</h4>\r\n                        <p>{this.props.rel_date}</p>\r\n                        <h4>Popularity</h4>\r\n                        <p>{this.props.pop}</p>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Movie;","import React from 'react'\r\nimport Movie from \"./Movie\";\r\n\r\n\r\nconst MovieLists = (props) =>{\r\n return(\r\n     <div className=\"container\">\r\n         <div className=\"card -content grey lighten-3 -panel hoverable\" >\r\n         <div className=\"row\">\r\n             <div className=\"col s12\">\r\n\r\n                     <Movie key ={props.movie.id} image={props.movie.poster_path}\r\n                     title={props.movie.title} overview={props.movie.overview}\r\n                            id={props.movie.id}\r\n                            rel_date={props.movie.release_date}\r\n                     pop={props.movie.popularity}/>\r\n                <td>\r\n                    <h2 >\r\n                        {props.movie.title}\r\n                    </h2>\r\n\r\n                    <p>{props.movie.overview}</p>\r\n                </td>\r\n\r\n\r\n            </div>\r\n             </div>\r\n         </div>\r\n\r\n     </div>\r\n )\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default MovieLists;","import React,{useState} from 'react';\nimport Nav from \"./components/Nav\";\nimport SearchBox from \"./components/SearchBox\";\nimport './index.css'\nimport MovieLists from './components/MovieLists'\nimport $ from 'jquery'\n\n\n//const apiKey=\"http://www.omdbapi.com/?i=tt3896198&apikey=165bbc9b\";\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state={};\n\n\n        this.performSearch(\"\")\n\n    }\n\nperformSearch(searchTerm){\n        const urlString ='https://api.themoviedb.org/3/search/movie?api_key=b906337d1552ee7c39e869eafd4cde73&query='+ searchTerm;\n\n$.ajax({\nurl:urlString,\n    success:(searchResults) =>{\n    console.log(\"Feteched succesfully\");\n    console.log(searchResults);\n    const results = searchResults.results\n        //console.log(results[0])\n    const movieRows = [];\n\n        results.forEach((movie) =>{\n           // console.log(movie.title);\n            //console.log(movie.poster_path)\n           // console.log(movie.id)\n            const movieRow =   <MovieLists key={movie.id}\n                                           id={movie.id}\n\n                                           movie={movie}/>\n            movieRows.push(movieRow);\n        })\n\n        this.setState({rows:movieRows})\n    },\n    error:(xhr,status,err) =>{\n    console.error(\"Failed to fetch\");\n    }\n})\n}\n\nsearchChange(e){\n        console.log(e.target.value);\n        const searchTerm = e.target.value;\n        this.performSearch(searchTerm);\n}\n\n\n    render() {\n\n\n        return (\n            <div className=\"App\">\n                <Nav/>\n                <SearchBox\n                    // searchItem={this.state.searchItem}\n                        searchChange={this.searchChange.bind(this)}\n                   />\n\n\n                {this.state.rows}\n\n\n            </div>\n        );\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}